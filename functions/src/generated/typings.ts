/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  TodoListItemCreateInput: { // input type
    description?: string | null; // String
    isCompleted?: boolean | null; // Boolean
  }
  UserCreateInput: { // input type
    name?: string | null; // String
    password?: string | null; // String
    username?: string | null; // String
  }
  UserWhereUniqueInput: { // input type
    id?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  TodoListItem: { // root type
    description: string; // String!
    id: string; // String!
    isCompleted: boolean; // Boolean!
  }
  User: { // root type
    id: string; // String!
    name: string; // String!
    password: string; // String!
    todoList?: NexusGenRootTypes['TodoListItem'][] | null; // [TodoListItem!]
    username: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  TodoListItemCreateInput: NexusGenInputs['TodoListItemCreateInput'];
  UserCreateInput: NexusGenInputs['UserCreateInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createTodoListItemByUser: NexusGenRootTypes['TodoListItem']; // TodoListItem!
    createUser: NexusGenRootTypes['User']; // User!
    login: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'] | null; // User
  }
  TodoListItem: { // field return type
    description: string; // String!
    id: string; // String!
    isCompleted: boolean; // Boolean!
  }
  User: { // field return type
    id: string; // String!
    name: string; // String!
    password: string; // String!
    todoList: NexusGenRootTypes['TodoListItem'][] | null; // [TodoListItem!]
    username: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createTodoListItemByUser: { // args
      data?: NexusGenInputs['TodoListItemCreateInput'] | null; // TodoListItemCreateInput
      userId: string; // ID!
    }
    createUser: { // args
      data?: NexusGenInputs['UserCreateInput'] | null; // UserCreateInput
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
  }
  Query: {
    user: { // args
      where?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
    }
    users: { // args
      where?: NexusGenInputs['UserWhereUniqueInput'] | null; // UserWhereUniqueInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "TodoListItem" | "User";

export type NexusGenInputNames = "TodoListItemCreateInput" | "UserCreateInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}